-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library for interacting with Solana blockchain.
--   
--   This library includes features like key generation and management,
--   transaction and instruction construction, and a JSON-RPC API client.
@package solana-haskell-sdk
@version 0.1.0.0

module Network.Solana.Constants
lamportsPerSol :: Integer

module Network.Solana.Core.Compact
getCompactU16 :: Get Word16
putCompactU16 :: Word16 -> Put
encodeCompactU16 :: Word16 -> ByteString
decodeCompactU16 :: ByteString -> Either String Word16
data CompactArray a
mkCompact :: [a] -> CompactArray a
unCompact :: CompactArray a -> [a]
getCompactArrayLength :: CompactArray a -> Word16
instance GHC.Generics.Generic (Network.Solana.Core.Compact.CompactArray a)
instance GHC.Show.Show a => GHC.Show.Show (Network.Solana.Core.Compact.CompactArray a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Network.Solana.Core.Compact.CompactArray a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Network.Solana.Core.Compact.CompactArray a)
instance Data.Binary.Class.Binary a => Data.Binary.Class.Binary (Network.Solana.Core.Compact.CompactArray a)

module Network.Solana.Core.Crypto
createSolanaKeyPair :: IO (SolanaPublicKey, SolanaPrivateKey)
createSolanaKeypairFromSeed :: ByteString -> Maybe (SolanaPublicKey, SolanaPrivateKey)
toSolanaPublicKey :: SolanaPrivateKey -> SolanaPublicKey
sign :: SolanaPrivateKey -> ByteString -> ByteString
verify :: SolanaPublicKey -> ByteString -> Bool
dsign :: SolanaPrivateKey -> ByteString -> SolanaSignature
dverify :: SolanaPublicKey -> ByteString -> SolanaSignature -> Bool
data SolanaPublicKey
data SolanaPrivateKey
data SolanaSignature
unsafeSolanaPublicKey :: String -> SolanaPublicKey
unsafeSolanaPublicKeyRaw :: [Word8] -> SolanaPublicKey
unsafeSolanaPrivateKey :: String -> SolanaPrivateKey
unsafeSolanaPrivateKeyRaw :: [Word8] -> SolanaPrivateKey
unsafeSigFromString :: String -> SolanaSignature
getSolanaPublicKeyRaw :: SolanaPublicKey -> ByteString
getSolanaPrivateKeyRaw :: SolanaPrivateKey -> ByteString
getSolanaSignatureRaw :: SolanaSignature -> ByteString
toBase58String :: ByteString -> String
toBase64String :: ByteString -> String
fromBase64String :: String -> ByteString
fromBase58String :: String -> Maybe ByteString
instance GHC.Generics.Generic Network.Solana.Core.Crypto.SolanaSignature
instance GHC.Classes.Ord Network.Solana.Core.Crypto.SolanaSignature
instance GHC.Classes.Eq Network.Solana.Core.Crypto.SolanaSignature
instance GHC.Generics.Generic Network.Solana.Core.Crypto.SolanaPublicKey
instance GHC.Classes.Ord Network.Solana.Core.Crypto.SolanaPublicKey
instance GHC.Classes.Eq Network.Solana.Core.Crypto.SolanaPublicKey
instance GHC.Generics.Generic Network.Solana.Core.Crypto.SolanaPrivateKey
instance GHC.Classes.Ord Network.Solana.Core.Crypto.SolanaPrivateKey
instance GHC.Classes.Eq Network.Solana.Core.Crypto.SolanaPrivateKey
instance GHC.Show.Show Network.Solana.Core.Crypto.SolanaPrivateKey
instance GHC.Show.Show Network.Solana.Core.Crypto.SolanaPublicKey
instance Data.Binary.Class.Binary Network.Solana.Core.Crypto.SolanaPublicKey
instance Data.Aeson.Types.ToJSON.ToJSON Network.Solana.Core.Crypto.SolanaPublicKey
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.Core.Crypto.SolanaPublicKey
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.Solana.Core.Crypto.SolanaPublicKey
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.Solana.Core.Crypto.SolanaPublicKey
instance GHC.Show.Show Network.Solana.Core.Crypto.SolanaSignature
instance Data.Binary.Class.Binary Network.Solana.Core.Crypto.SolanaSignature
instance Data.Aeson.Types.ToJSON.ToJSON Network.Solana.Core.Crypto.SolanaSignature
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.Core.Crypto.SolanaSignature

module Network.Solana.Core.Block
newtype BlockHash
BlockHash :: ByteString -> BlockHash
unsafeBlockHash :: String -> BlockHash
type BlockHeight = Word64
instance GHC.Base.Monoid Network.Solana.Core.Block.BlockHash
instance GHC.Base.Semigroup Network.Solana.Core.Block.BlockHash
instance GHC.Generics.Generic Network.Solana.Core.Block.BlockHash
instance GHC.Classes.Eq Network.Solana.Core.Block.BlockHash
instance GHC.Show.Show Network.Solana.Core.Block.BlockHash
instance Data.Binary.Class.Binary Network.Solana.Core.Block.BlockHash
instance Data.Aeson.Types.ToJSON.ToJSON Network.Solana.Core.Block.BlockHash
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.Core.Block.BlockHash

module Network.Solana.Core.Account

-- | Lamport is the smallest unit of SOL (1 SOL = 1 billion lamports).
newtype Lamport
Lamport :: Word64 -> Lamport
[unLamport] :: Lamport -> Word64
data Account
Account :: SolanaPublicKey -> AccountInfo -> Account
[pubkey] :: Account -> SolanaPublicKey
[account] :: Account -> AccountInfo
data AccountInfo
AccountInfo :: Lamport -> AccountData -> SolanaPublicKey -> Bool -> AccountInfo

-- | Amount of lamports in the account
[lamports] :: AccountInfo -> Lamport
[dataField] :: AccountInfo -> AccountData
[owner] :: AccountInfo -> SolanaPublicKey

-- | A boolean flag that indicates whether this account contains a loaded
--   program.
[executable] :: AccountInfo -> Bool

-- | A byte array that stores arbitrary data for an account.
data AccountData
AccountDataBinary :: ByteString -> AccountData
[accData] :: AccountData -> ByteString
AccountDataJSON :: String -> AccountData
[accDataObj] :: AccountData -> String
instance GHC.Num.Num Network.Solana.Core.Account.Lamport
instance GHC.Generics.Generic Network.Solana.Core.Account.Lamport
instance GHC.Classes.Ord Network.Solana.Core.Account.Lamport
instance GHC.Classes.Eq Network.Solana.Core.Account.Lamport
instance GHC.Generics.Generic Network.Solana.Core.Account.AccountData
instance GHC.Classes.Eq Network.Solana.Core.Account.AccountData
instance Data.Aeson.Types.ToJSON.ToJSON Network.Solana.Core.Account.AccountInfo
instance GHC.Generics.Generic Network.Solana.Core.Account.AccountInfo
instance GHC.Classes.Eq Network.Solana.Core.Account.AccountInfo
instance GHC.Show.Show Network.Solana.Core.Account.AccountInfo
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.Core.Account.Account
instance Data.Aeson.Types.ToJSON.ToJSON Network.Solana.Core.Account.Account
instance GHC.Generics.Generic Network.Solana.Core.Account.Account
instance GHC.Classes.Eq Network.Solana.Core.Account.Account
instance GHC.Show.Show Network.Solana.Core.Account.Account
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.Core.Account.AccountInfo
instance GHC.Show.Show Network.Solana.Core.Account.AccountData
instance Data.Aeson.Types.ToJSON.ToJSON Network.Solana.Core.Account.AccountData
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.Core.Account.AccountData
instance Data.Aeson.Types.ToJSON.ToJSON Network.Solana.Core.Account.Lamport
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.Core.Account.Lamport
instance GHC.Show.Show Network.Solana.Core.Account.Lamport

module Network.Solana.Core.Instruction
data Instruction
mkInstruction :: Binary a => SolanaPublicKey -> [AccountMeta] -> a -> Instruction
iProgramId :: Instruction -> SolanaPublicKey

-- | List of metadata describing accounts that should be passed to the
--   program.
iAccounts :: Instruction -> [AccountMeta]
iData :: Instruction -> InstructionData

-- | Each account required by an instruction must be provided as an
--   AccountMeta that contains:
data AccountMeta
AccountMeta :: SolanaPublicKey -> Bool -> Bool -> AccountMeta

-- | Account's address
[accountPubKey] :: AccountMeta -> SolanaPublicKey
[isSigner] :: AccountMeta -> Bool
[isWritable] :: AccountMeta -> Bool
newtype InstructionData
InstructionData :: ByteString -> InstructionData
[instrData] :: InstructionData -> ByteString
compileInstruction :: [SolanaPublicKey] -> Instruction -> Either CompileException CompiledInstruction

-- | The structure of a Compiled Instructuin.
data CompiledInstruction
data CompileException
instance GHC.Generics.Generic Network.Solana.Core.Instruction.AccountMeta
instance GHC.Classes.Eq Network.Solana.Core.Instruction.AccountMeta
instance GHC.Show.Show Network.Solana.Core.Instruction.AccountMeta
instance GHC.Generics.Generic Network.Solana.Core.Instruction.InstructionData
instance GHC.Classes.Eq Network.Solana.Core.Instruction.InstructionData
instance GHC.Generics.Generic Network.Solana.Core.Instruction.Instruction
instance GHC.Classes.Eq Network.Solana.Core.Instruction.Instruction
instance GHC.Show.Show Network.Solana.Core.Instruction.Instruction
instance GHC.Generics.Generic Network.Solana.Core.Instruction.CompiledInstruction
instance GHC.Classes.Eq Network.Solana.Core.Instruction.CompiledInstruction
instance GHC.Show.Show Network.Solana.Core.Instruction.CompiledInstruction
instance GHC.Show.Show Network.Solana.Core.Instruction.CompileException
instance GHC.Exception.Type.Exception Network.Solana.Core.Instruction.CompileException
instance Data.Aeson.Types.ToJSON.ToJSON Network.Solana.Core.Instruction.CompiledInstruction
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.Core.Instruction.CompiledInstruction
instance Data.Binary.Class.Binary Network.Solana.Core.Instruction.CompiledInstruction
instance GHC.Show.Show Network.Solana.Core.Instruction.InstructionData

module Network.Solana.Core.Message
newTransactionIntent :: [SolanaPrivateKey] -> [Instruction] -> SignedTransactionIntent

-- | The structure of a transaction message.
data Message

-- | The structure of a Compiled Message.
data CompiledMessage
newMessage :: BlockHash -> [Instruction] -> Either CompileException ByteString
newMessageToBase64String :: BlockHash -> [Instruction] -> Either CompileException String
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.Core.Message.MessageHeader
instance Data.Aeson.Types.ToJSON.ToJSON Network.Solana.Core.Message.MessageHeader
instance GHC.Generics.Generic Network.Solana.Core.Message.MessageHeader
instance GHC.Classes.Eq Network.Solana.Core.Message.MessageHeader
instance GHC.Show.Show Network.Solana.Core.Message.MessageHeader
instance GHC.Generics.Generic Network.Solana.Core.Message.Message
instance GHC.Classes.Eq Network.Solana.Core.Message.Message
instance GHC.Show.Show Network.Solana.Core.Message.Message
instance GHC.Generics.Generic Network.Solana.Core.Message.CompiledMessage
instance GHC.Classes.Eq Network.Solana.Core.Message.CompiledMessage
instance GHC.Show.Show Network.Solana.Core.Message.CompiledMessage
instance Data.Aeson.Types.ToJSON.ToJSON Network.Solana.Core.Message.CompiledMessage
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.Core.Message.CompiledMessage
instance Data.Binary.Class.Binary Network.Solana.Core.Message.CompiledMessage
instance Data.Binary.Class.Binary Network.Solana.Core.Message.MessageHeader
instance GHC.Base.Semigroup Network.Solana.Core.Message.MessageHeader
instance GHC.Base.Monoid Network.Solana.Core.Message.MessageHeader

module Network.Solana.Core.Transaction
data Transaction
Transaction :: CompiledMessage -> [SolanaSignature] -> Transaction
[message] :: Transaction -> CompiledMessage
[signatures] :: Transaction -> [SolanaSignature]
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.Core.Transaction.Transaction
instance Data.Aeson.Types.ToJSON.ToJSON Network.Solana.Core.Transaction.Transaction
instance GHC.Classes.Eq Network.Solana.Core.Transaction.Transaction
instance GHC.Show.Show Network.Solana.Core.Transaction.Transaction
instance GHC.Generics.Generic Network.Solana.Core.Transaction.Transaction

module Network.Solana.NativePrograms.SystemProgram
systemProgramId :: SolanaPublicKey
data SystemInstruction
CreateAccount :: Word64 -> Word64 -> SolanaPublicKey -> SystemInstruction
[lamports] :: SystemInstruction -> Word64
[space] :: SystemInstruction -> Word64
[owner] :: SystemInstruction -> SolanaPublicKey
Assign :: SolanaPublicKey -> SystemInstruction
[owner] :: SystemInstruction -> SolanaPublicKey
Transfer :: Word64 -> SystemInstruction
[lamports] :: SystemInstruction -> Word64
transfer :: SolanaPublicKey -> SolanaPublicKey -> Int -> Instruction
instance GHC.Generics.Generic Network.Solana.NativePrograms.SystemProgram.SystemInstruction
instance GHC.Show.Show Network.Solana.NativePrograms.SystemProgram.SystemInstruction
instance GHC.Classes.Eq Network.Solana.NativePrograms.SystemProgram.SystemInstruction
instance Data.Binary.Class.Binary Network.Solana.NativePrograms.SystemProgram.SystemInstruction

module Network.Solana.RPC.HTTP.Types
type Slot = Word64
data Context
Context :: Text -> Slot -> Context
[apiVersion] :: Context -> Text
[contextSlot] :: Context -> Slot
data RPCResponse a
RPCResponse :: Context -> a -> RPCResponse a
[context] :: RPCResponse a -> Context
[value] :: RPCResponse a -> a
data ConfigurationObject
ConfigurationObject :: Maybe String -> Maybe String -> Maybe Object -> Maybe Bool -> Maybe String -> Maybe Int -> Maybe Int -> Maybe Bool -> ConfigurationObject
[commitment] :: ConfigurationObject -> Maybe String
[encoding] :: ConfigurationObject -> Maybe String
[dataSlice] :: ConfigurationObject -> Maybe Object
[skipPreflight] :: ConfigurationObject -> Maybe Bool
[preflightCommitment] :: ConfigurationObject -> Maybe String
[maxRetries] :: ConfigurationObject -> Maybe Int
[minContextSlot] :: ConfigurationObject -> Maybe Int
[searchTransactionHistory] :: ConfigurationObject -> Maybe Bool
defaultConfigObject :: ConfigurationObject
cfgJustEncodingBase64 :: ConfigurationObject
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Types.Context
instance GHC.Show.Show Network.Solana.RPC.HTTP.Types.Context
instance GHC.Show.Show a => GHC.Show.Show (Network.Solana.RPC.HTTP.Types.RPCResponse a)
instance Data.Aeson.Types.ToJSON.ToJSON Network.Solana.RPC.HTTP.Types.ConfigurationObject
instance GHC.Show.Show Network.Solana.RPC.HTTP.Types.ConfigurationObject
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Types.ConfigurationObject
instance Data.Aeson.Types.FromJSON.FromJSON a => Data.Aeson.Types.FromJSON.FromJSON (Network.Solana.RPC.HTTP.Types.RPCResponse a)
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Types.Context

module Network.Solana.RPC.HTTP.Transaction

-- | Returns the fee the network will charge for a particular message
--   (base64-encoded). Returns 'RpcResponse (Maybe Int)' where the value is
--   the fee in lamports, or <a>Nothing</a> if the fee couldn't be
--   calculated.
getFeeForMessage' :: JsonRpc m => String -> m (RPCResponse (Maybe Int))

-- | Returns the fee the network will charge for a particular message
--   (base64-encoded). Returns 'Maybe Int' fee in lamports.
getFeeForMessage :: JsonRpc m => String -> m (Maybe Int)

-- | Returns metadata and content for a confirmed transaction identified by
--   its signature.
getTransaction :: JsonRpc m => SolanaSignature -> m TransactionResult

-- | Contains metadata and transaction information returned by
--   <a>getTransaction</a>.
data TransactionResult
TransactionResult :: Slot -> Maybe Int64 -> Maybe Object -> Transaction -> TransactionResult

-- | The slot this transaction was processed in.
[slotTx] :: TransactionResult -> Slot

-- | Estimated production time, as Unix timestamp (seconds since the Unix
--   epoch) when the transaction was processed.
[blockTimeTx] :: TransactionResult -> Maybe Int64

-- | Optional transaction metadata.
[metaTx] :: TransactionResult -> Maybe Object

-- | The transaction content.
[transactionTx] :: TransactionResult -> Transaction

-- | Requests an airdrop of the specified number of lamports to the given
--   address.
requestAirdrop :: JsonRpc m => SolanaPublicKey -> Lamport -> m SolanaSignature

-- | Default configuration used for sending transactions.
defaultRpcSendTransactionConfig :: ConfigurationObject

-- | Sends a base64-encoded transaction to the cluster using the default
--   configuration.
sendTransaction :: JsonRpc m => String -> m String

-- | Sends a base64-encoded transaction to the cluster with the specified
--   configuration.
sendTransaction' :: JsonRpc m => String -> ConfigurationObject -> m String

-- | Simulates a base64-encoded transaction with the given configuration.
simulateTransaction' :: JsonRpc m => String -> ConfigurationObject -> m Object

-- | Simulates a base64-encoded transaction using a basic configuration
--   with base64 encoding.
simulateTransaction :: JsonRpc m => String -> m Object
instance GHC.Show.Show Network.Solana.RPC.HTTP.Transaction.TransactionResult
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Transaction.TransactionResult
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Transaction.TransactionResult

module Network.Solana.RPC.HTTP.Tokenomics

-- | Returns the current inflation governor parameters.
--   
--   These parameters define how inflation is distributed and how it
--   changes over time.
getInflationGovernor :: JsonRpc m => m InflationGovernor

-- | Parameters defining the inflation configuration.
data InflationGovernor
InflationGovernor :: Double -> Double -> Double -> Double -> Double -> InflationGovernor

-- | Percentage of inflation allocated to the foundation.
[foundation] :: InflationGovernor -> Double

-- | Duration of the foundation pool inflation (in years).
[foundationTerm] :: InflationGovernor -> Double

-- | Initial inflation rate at genesis (percentage).
[initial] :: InflationGovernor -> Double

-- | Rate per year at which inflation is lowered. (Rate reduction is
--   derived using the target slot time in genesis config)
[taper] :: InflationGovernor -> Double

-- | Terminal inflation rate (percentage).
[terminal] :: InflationGovernor -> Double

-- | Returns the inflation rate values for the current epoch.
getInflationRate :: JsonRpc m => m InflationRate

-- | Inflation breakdown for the current epoch.
data InflationRate
InflationRate :: Double -> Double -> Double -> Int64 -> InflationRate

-- | Total inflation rate (percentage).
[totalInflation] :: InflationRate -> Double

-- | Portion allocated to validators.
[validatorInflation] :: InflationRate -> Double

-- | Portion allocated to the foundation.
[foundationInflation] :: InflationRate -> Double

-- | Epoch index for which these values apply.
[epochInflation] :: InflationRate -> Int64

-- | Returns the inflation reward for the specified accounts during an
--   epoch.
--   
--   Takes a list of public keys and returns a list of optional rewards.
--   Entries may be <a>Nothing</a> if the reward could not be determined
--   for the given account.
getInflationReward :: JsonRpc m => [SolanaPublicKey] -> m [Maybe InflationReward]

-- | Contains the inflation reward information for a given account.
data InflationReward
InflationReward :: Word64 -> Slot -> Lamport -> Lamport -> Maybe Word8 -> InflationReward

-- | Epoch in which the reward was issued.
[epochReward] :: InflationReward -> Word64

-- | Slot in which the reward became effective.
[effectiveSlot] :: InflationReward -> Slot

-- | Amount of reward, in lamports.
[amountReward] :: InflationReward -> Lamport

-- | Account balance after the reward was applied.
[postBalance] :: InflationReward -> Lamport

-- | Vote account commission when the reward was credited.
[commissionIR] :: InflationReward -> Maybe Word8

-- | Returns the minimum lamport balance required for a rent-exempt
--   account.
--   
--   Takes the account's data size in bytes and returns the required
--   balance.
getMinimumBalanceForRentExemption :: JsonRpc m => Int -> m Lamport

-- | Returns the minimum delegation amount required to stake. Returns
--   <tt>RpcResponse Lamport</tt> with value field set to <tt>Lamport</tt>.
getStakeMinimumDelegation' :: JsonRpc m => m (RPCResponse Lamport)

-- | Returns the minimum amount (in lamports) required for stake
--   delegation.
getStakeMinimumDelegation :: JsonRpc m => m Lamport

-- | Returns the current token supply information. Returns <tt>RpcResponse
--   SolanaSupply</tt> with value field set to <tt>SolanaSupply</tt>.
getSupply' :: JsonRpc m => m (RPCResponse SolanaSupply)

-- | Returns the current token supply information.
getSupply :: JsonRpc m => m SolanaSupply

-- | Contains information about the total, circulating, and non-circulating
--   token supply.
data SolanaSupply
SolanaSupply :: Lamport -> Lamport -> Lamport -> [SolanaPublicKey] -> SolanaSupply

-- | Total supply in lamports.
[total] :: SolanaSupply -> Lamport

-- | Circulating supply in lamports.
[circulating] :: SolanaSupply -> Lamport

-- | Non-circulating supply in lamports.
[nonCirculating] :: SolanaSupply -> Lamport

-- | Accounts holding non-circulating tokens.
[nonCirculatingAccounts] :: SolanaSupply -> [SolanaPublicKey]

-- | Returns vote account information for all validators in the current
--   bank.
--   
--   Includes both current and delinquent vote accounts.
getVoteAccounts :: JsonRpc m => m VoteAccounts

-- | Lists current and delinquent vote accounts.
data VoteAccounts
VoteAccounts :: [VoteAccountsResult] -> [VoteAccountsResult] -> VoteAccounts

-- | Currently active vote accounts.
[current] :: VoteAccounts -> [VoteAccountsResult]

-- | Delinquent vote accounts.
[delinquent] :: VoteAccounts -> [VoteAccountsResult]

-- | Information about a vote account.
data VoteAccountsResult
VoteAccountsResult :: SolanaPublicKey -> SolanaPublicKey -> Word64 -> Bool -> Int -> Slot -> [[Word64]] -> Slot -> VoteAccountsResult

-- | Address of the vote account.
[votePubkey] :: VoteAccountsResult -> SolanaPublicKey

-- | Identity of the validator node.
[nodePubkey] :: VoteAccountsResult -> SolanaPublicKey

-- | Stake delegated to this vote account (active in this epoch).
[activatedStake] :: VoteAccountsResult -> Word64

-- | Whether the vote account is active this epoch.
[epochVoteAccount] :: VoteAccountsResult -> Bool

-- | Commission percentage charged by the validator (0–100).
[commission] :: VoteAccountsResult -> Int

-- | Most recent slot voted on.
[lastVote] :: VoteAccountsResult -> Slot

-- | Historical epoch credits: [epoch, credits, previousCredits].
[epochCredits] :: VoteAccountsResult -> [[Word64]]

-- | Current root slot for this vote account.
[rootSlot] :: VoteAccountsResult -> Slot
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Tokenomics.InflationGovernor
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Tokenomics.InflationGovernor
instance GHC.Show.Show Network.Solana.RPC.HTTP.Tokenomics.InflationGovernor
instance GHC.Show.Show Network.Solana.RPC.HTTP.Tokenomics.InflationRate
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Tokenomics.InflationReward
instance GHC.Show.Show Network.Solana.RPC.HTTP.Tokenomics.InflationReward
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Tokenomics.SolanaSupply
instance GHC.Classes.Eq Network.Solana.RPC.HTTP.Tokenomics.SolanaSupply
instance GHC.Show.Show Network.Solana.RPC.HTTP.Tokenomics.SolanaSupply
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Tokenomics.SolanaSupply
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Tokenomics.VoteAccountsResult
instance GHC.Show.Show Network.Solana.RPC.HTTP.Tokenomics.VoteAccountsResult
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Tokenomics.VoteAccountsResult
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Tokenomics.VoteAccounts
instance GHC.Show.Show Network.Solana.RPC.HTTP.Tokenomics.VoteAccounts
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Tokenomics.VoteAccounts
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Tokenomics.InflationReward
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Tokenomics.InflationRate

module Network.Solana.RPC.HTTP.Token

-- | Returns the token balance of an SPL Token account. Returns
--   'RpcResponse AmmountObject' with detailed balance information.
getTokenAccountBalance' :: JsonRpc m => SolanaPublicKey -> m (RPCResponse AmmountObject)

-- | Returns the token balance of an SPL Token account.
getTokenAccountBalance :: JsonRpc m => SolanaPublicKey -> m AmmountObject

-- | Contains SPL token balance details.
data AmmountObject
AmmountObject :: String -> Word8 -> Maybe Double -> String -> AmmountObject

-- | The raw balance without decimals, a string representation of .
[amount] :: AmmountObject -> String

-- | Number of base 10 digits to the right of the decimal place.
[decimals] :: AmmountObject -> Word8

-- | The balance using mint-prescribed decimals (deprecated).
[uiAmount] :: AmmountObject -> Maybe Double

-- | The balance as a string, using mint-prescribed decimals.
[uiAmountString] :: AmmountObject -> String

-- | Returns all SPL Token accounts delegated to the provided delegate
--   address.
getTokenAccountsByDelegate :: JsonRpc m => SolanaPublicKey -> SolanaPubKeyWithPurpose -> ConfigurationObject -> m (RPCResponse [Account])

-- | Specifies either a mint or a program to filter token accounts.
data SolanaPubKeyWithPurpose
Mint :: SolanaPublicKey -> SolanaPubKeyWithPurpose
Program :: SolanaPublicKey -> SolanaPubKeyWithPurpose

-- | Returns all SPL Token accounts owned by the specified wallet.
getTokenAccountsByOwner' :: JsonRpc m => SolanaPublicKey -> SolanaPubKeyWithPurpose -> ConfigurationObject -> m (RPCResponse [Account])

-- | Returns all SPL Token accounts owned by the specified wallet.
getTokenAccountsByOwner :: JsonRpc m => SolanaPublicKey -> SolanaPubKeyWithPurpose -> m [Account]

-- | Returns all SPL Token accounts for the specified owner and mint
--   address.
getTokenAccountsByOwnerAndMint :: JsonRpc m => SolanaPublicKey -> SolanaPublicKey -> m [Account]

-- | Returns all SPL Token accounts for the specified owner and program ID.
getTokenAccountsByOwnerAndProgram :: JsonRpc m => SolanaPublicKey -> SolanaPublicKey -> m [Account]

-- | Returns the largest accounts for a given SPL Token mint, sorted by
--   balance. Returns 'RpcResponse [AmmountObjectWithAddr]'.
getTokenLargestAccounts' :: JsonRpc m => SolanaPublicKey -> m (RPCResponse [AmmountObjectWithAddr])

-- | Returns the largest accounts for a given SPL Token mint, sorted by
--   balance.
getTokenLargestAccounts :: JsonRpc m => SolanaPublicKey -> m [AmmountObjectWithAddr]

-- | Contains address and balance information for an SPL Token account.
data AmmountObjectWithAddr
AmmountObjectWithAddr :: SolanaPublicKey -> String -> Word8 -> Maybe Double -> String -> AmmountObjectWithAddr

-- | The account address.
[address'] :: AmmountObjectWithAddr -> SolanaPublicKey

-- | The raw balance without decimals, a string representation of
--   <a>Word64</a>.
[amount'] :: AmmountObjectWithAddr -> String

-- | Number of base 10 digits to the right of the decimal place.
[decimals'] :: AmmountObjectWithAddr -> Word8

-- | The balance using mint-prescribed decimals (deprecated).
[uiAmount'] :: AmmountObjectWithAddr -> Maybe Double

-- | The balance as a string, using mint-prescribed decimals.
[uiAmountString'] :: AmmountObjectWithAddr -> String

-- | Returns the total supply of an SPL Token. Returns 'RpcResponse
--   AmmountObject' with the supply balance.
getTokenSupply' :: JsonRpc m => SolanaPublicKey -> m (RPCResponse AmmountObject)

-- | Returns the total supply of an SPL Token.
getTokenSupply :: JsonRpc m => SolanaPublicKey -> m AmmountObject
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Token.AmmountObject
instance GHC.Classes.Eq Network.Solana.RPC.HTTP.Token.AmmountObject
instance GHC.Show.Show Network.Solana.RPC.HTTP.Token.AmmountObject
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Token.AmmountObject
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Token.SolanaPubKeyWithPurpose
instance GHC.Show.Show Network.Solana.RPC.HTTP.Token.AmmountObjectWithAddr
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Token.AmmountObjectWithAddr
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Token.AmmountObjectWithAddr
instance Data.Aeson.Types.ToJSON.ToJSON Network.Solana.RPC.HTTP.Token.SolanaPubKeyWithPurpose

module Network.Solana.RPC.HTTP.Ledger

-- | Returns information about the current epoch.
--   
--   This includes the current slot, block height, epoch index, and
--   transaction count since genesis.
getEpochInfo :: JsonRpc m => m EpochInfo

-- | Solana epoch index.
type Epoch = Word64

-- | Contains information about the current epoch.
data EpochInfo
EpochInfo :: Slot -> Word64 -> Epoch -> Word64 -> Word64 -> Maybe Word64 -> EpochInfo

-- | The current absolute slot.
[absoluteSlot] :: EpochInfo -> Slot

-- | The current block height.
[blockHeight] :: EpochInfo -> Word64

-- | The current epoch index.
[epoch] :: EpochInfo -> Epoch

-- | Slot index relative to the start of the epoch.
[slotIndex] :: EpochInfo -> Word64

-- | Total number of slots in the epoch.
[slotsInEpoch] :: EpochInfo -> Word64

-- | Total number of successful transactions since genesis.
[transactionCount] :: EpochInfo -> Maybe Word64

-- | Returns the epoch scheduling parameters configured in the cluster's
--   genesis configuration.
getEpochSchedule :: JsonRpc m => m EpochSchedule

-- | Contains epoch schedule information as defined in the cluster's
--   genesis config.
data EpochSchedule
EpochSchedule :: Word64 -> Word64 -> Bool -> Word64 -> Word64 -> EpochSchedule

-- | Maximum number of slots per epoch.
[slotsPerEpoch] :: EpochSchedule -> Word64

-- | Number of slots before epoch start to compute leader schedule.
[leaderScheduleSlotOffset] :: EpochSchedule -> Word64

-- | Whether epochs start small and grow (warmup).
[warmup] :: EpochSchedule -> Bool

-- | First normal-length epoch.(log2(slotsPerEpoch) -
--   log2(MINIMUM_SLOTS_PER_EPOCH))
[firstNormalEpoch] :: EpochSchedule -> Word64

-- | First slot of the first normal-length epoch. ( MINIMUM_SLOTS_PER_EPOCH
--   * (2.pow(firstNormalEpoch) - 1))
[firstNormalSlot] :: EpochSchedule -> Word64

-- | Returns the slot of the lowest confirmed block that has not been
--   purged from the ledger.
getFirstAvailableBlock :: JsonRpc m => m Slot

-- | Returns the block hash of the genesis block.
getGenesisHash :: JsonRpc m => m BlockHash

-- | Returns the leader schedule mapping validator identities to their
--   leader slots.
--   
--   Fetches the leader schedule for the epoch that contains the specified
--   slot. If no slot is specified, the schedule for the current epoch is
--   returned.
getLeaderSchedule :: JsonRpc m => Maybe Slot -> m (Maybe LeaderSchedule)

-- | Map from validator identity pubkeys to arrays of slot indices
--   indicating when each validator is expected to produce a block.
type LeaderSchedule = Map SolanaPublicKey [Word64]

-- | Returns the highest slot observed by the node from the retransmit
--   stage.
getMaxRetransmitSlot :: JsonRpc m => m Slot

-- | Returns the highest slot observed by the node after shred insertion.
getMaxShredInsertSlot :: JsonRpc m => m Slot

-- | Returns the current slot, based on the default or specified commitment
--   level.
getSlot :: JsonRpc m => m Slot

-- | Returns the identity public key of the current slot leader.
getSlotLeader :: JsonRpc m => m SolanaPublicKey

-- | Returns the list of slot leaders for a given slot range.
--   
--   Takes a starting <a>Slot</a> and a limit (between 1 and 5,000), and
--   returns the validator identities that will produce blocks for the
--   given slots.
getSlotLeaders :: JsonRpc m => Slot -> Int -> m [SolanaPublicKey]

-- | Returns the total number of transactions recorded in the ledger.
getTransactionCount :: JsonRpc m => m Slot

-- | Returns the lowest slot that the node has information about in its
--   ledger.
minimumLedgerSlot :: JsonRpc m => m Slot
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Ledger.EpochInfo
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Ledger.EpochInfo
instance GHC.Show.Show Network.Solana.RPC.HTTP.Ledger.EpochInfo
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Ledger.EpochSchedule
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Ledger.EpochSchedule
instance GHC.Show.Show Network.Solana.RPC.HTTP.Ledger.EpochSchedule

module Network.Solana.RPC.HTTP.Chain

-- | Returns information about all the nodes currently participating in the
--   cluster.
getClusterNodes :: JsonRpc m => m [ClusterNodes]

-- | Contains information about all the nodes participating in the cluster.
data ClusterNodes
ClusterNodes :: SolanaPublicKey -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Word32 -> Maybe Word16 -> ClusterNodes

-- | The node's public key.
[pubkey] :: ClusterNodes -> SolanaPublicKey

-- | Gossip network address for the node.
[gossip] :: ClusterNodes -> Maybe String

-- | TPU (Transaction Processing Unit) network address.
[tpu] :: ClusterNodes -> Maybe String

-- | JSON-RPC address, if the RPC service is enabled.
[rpc] :: ClusterNodes -> Maybe String

-- | Software version of the node, if available.
[version] :: ClusterNodes -> Maybe String

-- | Unique identifier of the node's feature set.
[featureSet] :: ClusterNodes -> Maybe Word32

-- | Shred version used by the node.
[sharedVersion] :: ClusterNodes -> Maybe Word16

-- | Checks if the node is healthy.
--   
--   A healthy node is within a certain number of slots (defined by
--   <tt>HEALTH_CHECK_SLOT_DISTANCE</tt>) of the latest confirmed cluster
--   slot. Returns <tt>"ok"</tt> if healthy; otherwise, an error is
--   returned.
getHealth :: JsonRpc m => m String

-- | Returns the highest full and incremental snapshot slots that the node
--   has generated.
--   
--   This includes the highest full snapshot slot and, if available, the
--   corresponding highest incremental snapshot slot.
getHighestSnapshotSlot :: JsonRpc m => m HighestSnapshotSlot

-- | Contains the highest slot information that the node has snapshots for.
data HighestSnapshotSlot
HighestSnapshotSlot :: Word64 -> Maybe Word64 -> HighestSnapshotSlot

-- | The highest full snapshot slot.
[full] :: HighestSnapshotSlot -> Word64

-- | The highest incremental snapshot slot, if available.
[incremental] :: HighestSnapshotSlot -> Maybe Word64

-- | Returns the full <a>NodeIdentity</a> object for the current node.
getIdentity' :: JsonRpc m => m NodeIdentity

-- | Returns the identity public key of the current node.
getIdentity :: JsonRpc m => m SolanaPublicKey

-- | Identity information for the current node.
newtype NodeIdentity
NodeIdentity :: SolanaPublicKey -> NodeIdentity

-- | The node's identity public key.
[identity] :: NodeIdentity -> SolanaPublicKey

-- | Returns a list of recent <a>PerformanceSample</a> entries, in reverse
--   slot order.
--   
--   Performance samples are collected every 60 seconds and include metrics
--   such as the number of transactions, slots, and non-vote transactions
--   within each sample window. Optionally takes the number of samples to
--   return (must be ≤ 720).
getRecentPerformanceSamples :: JsonRpc m => Maybe Int -> m [PerformanceSample]

-- | Performance metrics sampled periodically from the node.
data PerformanceSample
PerformanceSample :: Slot -> Word64 -> Word64 -> Word16 -> Word64 -> PerformanceSample

-- | Slot in which the sample was taken.
[slot] :: PerformanceSample -> Slot

-- | Number of transactions during the sample period.
[numTransactions] :: PerformanceSample -> Word64

-- | Number of slots completed during the sample.
[numSlots] :: PerformanceSample -> Word64

-- | Duration of the sampling window, in seconds.
[samplePeriodSecs] :: PerformanceSample -> Word16

-- | Number of non-vote transactions during the sample.
[numNonVoteTransactions] :: PerformanceSample -> Word64

-- | Returns recent prioritization fees observed in recent blocks.
--   
--   Optionally takes a list of up to 128 account addresses. If provided,
--   the response estimates the prioritization fee for landing a
--   transaction that locks all listed accounts as writable.
getRecentPrioritizationFees :: JsonRpc m => Maybe [SolanaPublicKey] -> m [PrioritizationFee]

-- | A prioritization fee sample from a recent block.
data PrioritizationFee
PrioritizationFee :: Slot -> Word64 -> PrioritizationFee

-- | Slot in which the fee was observed.
[pfSlot] :: PrioritizationFee -> Slot

-- | Per-compute-unit fee (in micro-lamports).
[prioritizationFee] :: PrioritizationFee -> Word64

-- | Returns the Solana software version and feature set currently running
--   on the node.
getVersion :: JsonRpc m => m SolanaVersion

-- | Contains information about the software version and feature set
--   identifier of the node.
data SolanaVersion
SolanaVersion :: String -> Word32 -> SolanaVersion

-- | Software version of 'solana-core'.
[solana_core] :: SolanaVersion -> String

-- | Unique identifier of the software's feature set.
[feature_set] :: SolanaVersion -> Word32
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Chain.ClusterNodes
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Chain.ClusterNodes
instance GHC.Show.Show Network.Solana.RPC.HTTP.Chain.ClusterNodes
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Chain.HighestSnapshotSlot
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Chain.HighestSnapshotSlot
instance GHC.Show.Show Network.Solana.RPC.HTTP.Chain.HighestSnapshotSlot
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Chain.NodeIdentity
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Chain.NodeIdentity
instance GHC.Show.Show Network.Solana.RPC.HTTP.Chain.NodeIdentity
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Chain.PerformanceSample
instance GHC.Show.Show Network.Solana.RPC.HTTP.Chain.PerformanceSample
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Chain.PerformanceSample
instance GHC.Show.Show Network.Solana.RPC.HTTP.Chain.PrioritizationFee
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Chain.PrioritizationFee
instance GHC.Classes.Eq Network.Solana.RPC.HTTP.Chain.SolanaVersion
instance GHC.Show.Show Network.Solana.RPC.HTTP.Chain.SolanaVersion
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Chain.SolanaVersion
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Chain.SolanaVersion
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Chain.PrioritizationFee

module Network.Solana.RPC.HTTP.Block

-- | Returns identity and transaction information about a confirmed block
--   in the ledger.
getBlock :: JsonRpc m => Slot -> m BlockInfo

-- | Contains identity and transaction information for a block.
data BlockInfo
BlockInfo :: BlockHash -> BlockHash -> Slot -> [TransactionWithMeta] -> Maybe Int64 -> Maybe BlockHeight -> BlockInfo

-- | The blockhash of this block.
[blockhashBI] :: BlockInfo -> BlockHash

-- | The blockhash of this block's parent. If the parent is not available
--   due to ledger cleanup, this will return
--   "11111111111111111111111111111111".
[previousBlockhashBI] :: BlockInfo -> BlockHash

-- | The slot index of this block's parent.
[parentSlotBI] :: BlockInfo -> Slot

-- | List of transactions included in the block, each with optional
--   metadata.
[transactionsBI] :: BlockInfo -> [TransactionWithMeta]

-- | Estimated production time, as a Unix timestamp (in seconds).
--   <a>Nothing</a> if not available.
[blockTimeBI] :: BlockInfo -> Maybe Int64

-- | The number of blocks beneath this block.
[blockHeightBI] :: BlockInfo -> Maybe BlockHeight

-- | A transaction and its optional metadata as included in a block.
data TransactionWithMeta
TransactionWithMeta :: Maybe Object -> Transaction -> TransactionWithMeta

-- | Optional metadata for the transaction.
[meta] :: TransactionWithMeta -> Maybe Object

-- | The transaction details.
[transaction] :: TransactionWithMeta -> Transaction

-- | Get the block commitment based on the given block number <a>Slot</a>.
--   Returns a <a>BlockCommitment</a> for the specified block.
getBlockCommitment :: JsonRpc m => Slot -> m BlockCommitment

-- | Commitment information for a block.
data BlockCommitment
BlockCommitment :: Maybe [Word64] -> Integer -> BlockCommitment

-- | Array logging the amount of cluster stake in lamports that has voted
--   on the block at each depth from 0 to MAX_LOCKOUT_HISTORY
[commitmentList] :: BlockCommitment -> Maybe [Word64]

-- | Total active stake, in lamports, for the current epoch.
[totalStake] :: BlockCommitment -> Integer

-- | Returns the current block height of the node.
getBlockHeight :: JsonRpc m => m BlockHeight

-- | Returns recent block production information from the current or
--   previous epoch. Returns 'RpcResponse BlockProduction' with the
--   production statistics.
getBlockProduction' :: JsonRpc m => m (RPCResponse BlockProduction)

-- | Returns recent block production information from the current or
--   previous epoch.
getBlockProduction :: JsonRpc m => m BlockProduction

-- | Range of slots considered.
type ValidatorData = [Word64]

-- | Mapping from validator identity to number of blocks produced.
type ByIdentity = Map SolanaPublicKey ValidatorData

-- | Range of slots considered for block production.
data BlockProductionRange
BlockProductionRange :: Slot -> Slot -> BlockProductionRange

-- | First slot in the range.
[firstSlot] :: BlockProductionRange -> Slot

-- | Last slot in the range.
[lastSlot] :: BlockProductionRange -> Slot

-- | Block production statistics mapped by validator identity.
data BlockProduction
BlockProduction :: ByIdentity -> BlockProductionRange -> BlockProduction

-- | Returns a list of confirmed blocks between two slots (inclusive). The
--   maximum range allowed is 500,000 slots.
getBlocks :: JsonRpc m => Slot -> Maybe Slot -> m [Int]

-- | Returns a list of confirmed blocks starting from the given slot, up to
--   the specified limit.
getBlocksWithLimit :: JsonRpc m => Slot -> Int -> m [Int]

-- | Returns the estimated production time of a block (as Unix timestamp).
--   This is based on stake-weighted votes and validator-reported
--   timestamps.
getBlockTime :: JsonRpc m => Slot -> m Int

-- | Get the hash and height of the latest block. Returns 'RpcResponse
--   LatestBlockHash' containing the block information.
getLatestBlockhash' :: JsonRpc m => m (RPCResponse LatestBlockHash)

-- | Get the hash and height of the latest block.
getLatestBlockhash :: JsonRpc m => m LatestBlockHash

-- | Get only the blockhash of the latest block.
getTheLatestBlockhash :: JsonRpc m => m BlockHash

-- | Contains the hash and the height of the latest block.
data LatestBlockHash
LatestBlockHash :: BlockHash -> BlockHeight -> LatestBlockHash

-- | Block hash as a base-58 encoded string.
[blockhash] :: LatestBlockHash -> BlockHash

-- | Last block height at which the blockhash is still considered valid.
[lastValidBlockHeight] :: LatestBlockHash -> BlockHeight

-- | Returns whether a blockhash is still valid.
isBlockhashValid' :: JsonRpc m => BlockHash -> m (RPCResponse Bool)

-- | Returns whether a blockhash is still valid.
isBlockhashValid :: JsonRpc m => BlockHash -> m Bool
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Block.TransactionWithMeta
instance GHC.Show.Show Network.Solana.RPC.HTTP.Block.TransactionWithMeta
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Block.TransactionWithMeta
instance GHC.Show.Show Network.Solana.RPC.HTTP.Block.BlockInfo
instance GHC.Show.Show Network.Solana.RPC.HTTP.Block.BlockCommitment
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Block.BlockProductionRange
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Block.BlockProductionRange
instance GHC.Show.Show Network.Solana.RPC.HTTP.Block.BlockProductionRange
instance GHC.Show.Show Network.Solana.RPC.HTTP.Block.BlockProduction
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Block.BlockProduction
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Block.LatestBlockHash
instance GHC.Show.Show Network.Solana.RPC.HTTP.Block.LatestBlockHash
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Block.LatestBlockHash
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Block.BlockProduction
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Block.BlockCommitment
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Block.BlockInfo

module Network.Solana.RPC.HTTP.Account

-- | Fetches all available data for the given account address. Returns
--   'RpcResponse (Maybe AccountInfo)', where <a>Nothing</a> indicates the
--   account does not exist.
getAccountInfo' :: JsonRpc m => SolanaPublicKey -> m (RPCResponse (Maybe AccountInfo))

-- | Fetches all available data for the given account address. Returns
--   <a>Nothing</a> if the account does not exist.
getAccountInfo :: JsonRpc m => SolanaPublicKey -> m (Maybe AccountInfo)

-- | Returns the balance, in lamports, of the specified account. Returns
--   'RpcResponse Lamport'.
getBalance' :: JsonRpc m => SolanaPublicKey -> m (RPCResponse Lamport)

-- | Returns the balance, in lamports, of the specified account.
getBalance :: JsonRpc m => SolanaPublicKey -> m Lamport

-- | Returns account information for a list of addresses. For any missing
--   account, the result contains <a>Nothing</a> in its place.
getMultipleAccounts' :: JsonRpc m => [SolanaPublicKey] -> m (RPCResponse [Maybe AccountInfo])

-- | Returns account information for a list of addresses. For any missing
--   account, the result contains <a>Nothing</a> in its place.
getMultipleAccounts :: JsonRpc m => [SolanaPublicKey] -> m [Maybe AccountInfo]

-- | Returns all accounts owned by the specified program address.
getProgramAccounts :: JsonRpc m => SolanaPublicKey -> m [Account]

-- | Contains the address and value of an account.
data AddressAndLamports
AddressAndLamports :: SolanaPublicKey -> Lamport -> AddressAndLamports

-- | Account address
[address] :: AddressAndLamports -> SolanaPublicKey

-- | Number of lamports in the account
[lamports] :: AddressAndLamports -> Lamport

-- | Returns up to the 20 accounts with the highest balances in lamports.
--   Results may be cached for up to two hours.
getLargestAccounts' :: JsonRpc m => m (RPCResponse [AddressAndLamports])

-- | Returns up to the 20 accounts with the highest balances in lamports.
--   Results may be cached for up to two hours.
getLargestAccounts :: JsonRpc m => m [(SolanaPublicKey, Lamport)]

-- | Returns confirmed transaction signatures involving the given address,
--   in reverse chronological order.
getSignaturesForAddress :: JsonRpc m => SolanaPublicKey -> m [TransactionSignatureInformation]

-- | Metadata for a confirmed transaction signature involving a given
--   address.
data TransactionSignatureInformation
TransactionSignatureInformation :: SolanaSignature -> Slot -> Maybe String -> Maybe String -> Maybe Int64 -> Maybe String -> TransactionSignatureInformation

-- | Transaction signature
[signature] :: TransactionSignatureInformation -> SolanaSignature

-- | The slot that contains the block with the transaction
[slotTxSig] :: TransactionSignatureInformation -> Slot

-- | Error if transaction failed, <a>Nothing</a> if transaction succeeded.
[err] :: TransactionSignatureInformation -> Maybe String

-- | Memo associated with the transaction, <a>Nothing</a> if no memo is
--   present
[memo] :: TransactionSignatureInformation -> Maybe String

-- | Estimated production time, as Unix timestamp (seconds since the Unix
--   epoch) of when transaction was processed. <a>Nothing</a> if not
--   available.
[blockTime] :: TransactionSignatureInformation -> Maybe Int64

-- | The transaction's cluster confirmation status;
[confirmationStatus] :: TransactionSignatureInformation -> Maybe String

-- | Returns the confirmation status and slot info for the specified
--   transaction signatures. Each signature should be the transaction’s
--   first signature (used as a unique identifier).
getSignatureStatuses' :: JsonRpc m => [SolanaSignature] -> ConfigurationObject -> m (RPCResponse [Maybe TransactionSignatureStatus])

-- | Returns the confirmation status and slot info for the specified
--   transaction signatures. Each signature should be the transaction’s
--   first signature (used as a unique identifier).
getSignatureStatuses :: JsonRpc m => [SolanaSignature] -> m [Maybe TransactionSignatureStatus]

-- | Status metadata for a given transaction signature.
data TransactionSignatureStatus
TransactionSignatureStatus :: Slot -> Maybe Int -> Maybe String -> Maybe String -> TransactionSignatureStatus

-- | The slot the transaction was processed
[slotTxStatus] :: TransactionSignatureStatus -> Slot

-- | Number of blocks since signature confirmation, <a>Nothing</a> if
--   rooted, as well as finalized by a supermajority of the cluster.
[confirmationsTxStatus] :: TransactionSignatureStatus -> Maybe Int

-- | Error if transaction failed, <a>Nothing</a> if transaction succeeded.
[errTxStatus] :: TransactionSignatureStatus -> Maybe String

-- | The transaction's cluster confirmation status.
[confirmationStatusTxStatus] :: TransactionSignatureStatus -> Maybe String
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Account.AddressAndLamports
instance GHC.Show.Show Network.Solana.RPC.HTTP.Account.AddressAndLamports
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Account.AddressAndLamports
instance GHC.Show.Show Network.Solana.RPC.HTTP.Account.TransactionSignatureInformation
instance GHC.Show.Show Network.Solana.RPC.HTTP.Account.TransactionSignatureStatus
instance GHC.Generics.Generic Network.Solana.RPC.HTTP.Account.TransactionSignatureStatus
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Account.TransactionSignatureStatus
instance Data.Aeson.Types.FromJSON.FromJSON Network.Solana.RPC.HTTP.Account.TransactionSignatureInformation

module Network.Solana.RPC.Providers
devnetHttpProvider :: Provider
localHttpProvider :: Provider
